#version 400

in vec2             textureCoord;
uniform sampler2D   texture0;
uniform sampler2D   texture1;
uniform sampler2D   texture2;
uniform sampler2D   texture3;
uniform float       opacity;
uniform float       mix;
uniform float       time;

#define MPI 3.14159265359
#define MPI2 6.28318530718

mat2 rotateMat(float angle)
{
    float s = sin(angle);
    float c = cos(angle);
    return mat2(c, s, -s, c);
}

vec2 rotate(vec2 p, float angle)
{
    vec2 p2 = p + 0.5;

    mat2 m = rotateMat((360/MPI2) * angle);

    vec2 a1 = vec2(p2 * vec2(m[0][0], m[1][0]));
    vec2 a2 = vec2(p2 * vec2(m[0][1], m[1][1]));

    return vec2(a1.x + a1.y, a2.x + a2.y);
}


//float gauss(float x, float deviation, float center)
//{
//    float a = 1.0/(deviation * sqrt(MPI2));
//
//    return a * exp( -pow(x - center, 2)/(2 * pow(deviation, 2)) );
//}

//float gauss(float x, float center, float sigma) // sigma = deviation
//{
//    float a = 1.0 / ( sqrt(MPI2) * sigma );
//
//    return a * exp( -pow(x - center, 2.0) / (2.0 * pow(sigma, 2.0)) );
//}



void main()
{
	float  phase   = (textureCoord.x * MPI2 * 8) + time;
	float  s1      = sin(phase);
	float  c1      = cos(phase);

	float   k0 = (c1+1.0/2.0) * 0.01;// * textureCoord.x;
	float   k1 = k0;

	//vec4    pixel = texture2D(texture0, textureCoord + vec2(k0, k1));

	vec4 pixel;

	for(int i=0; i<10; i++){
        pixel += texture2D(texture0, textureCoord + vec2(0.001 * i, 0.0));
	}

//    pixel.r += 0.0;
//    pixel.g += 0.1;
//    pixel.b += 0.2;
//    pixel.a += 0.75;
//
//    pixel.rgb += s1 * 0.1;

    //pixel.a *= 1 - tcoord.x;

    gl_FragColor = pixel * opacity;
}

